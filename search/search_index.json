{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>This is just a placeholder file for the webpage re-direct. All the content for this section is actually in the <code>introduction.md</code> file.</p>"},{"location":"examples/","title":"Arduino Examples","text":"<p>The SparkFun u-blox Cellular Arduino Library includes a large set of examples to do all sorts of things with supported u-blox cellular modules. Some examples work with all modules, others are limited to specific ones. All examples assume a serial connection between a microcontroller and the LTE Stick (or other supported cellular module) as demonstrated in the Hardware Assembly section. These examples build upon each other so we recommend following them in sequential order to get everything set up and working properly.</p> <p>LARA-R6 Power</p> <p>Make sure to power on the module using the \"ON\" button </p> <p>If you have not used m-center or AT commands to configure the network information and register the network operator for your device before using this library, you may need to go through Example 2 - Network Info and Example 3 - Register Operator to get the LARA-R6 registered and configured properly on your network. Otherwise, feel free to skip ahead to the Ping and other more complex examples.</p>"},{"location":"examples/#example-1-device-identification","title":"Example 1 - Device Identification","text":"<p>The first example  performs the basic AT commands to return the device information of a connected module:</p> <ul> <li>Manufacturer ID</li> <li>Model</li> <li>Firmware Version</li> <li>Serial Number</li> <li>IMEI ID</li> <li>IMSI ID</li> <li>SIM CCID</li> <li>Subscriber Number (from the SIM)</li> <li>Capabilities</li> <li>SIM state</li> </ul> <p>Open the example by navigating to File &lt; Examples &lt; SparkFun u-blox Cellular Arduino Library &lt; Example 1 - Device Identification or copy the code below into a blank sketch.</p> Example 1 - Device Information <pre><code>#include \"SparkFun_u-blox_Cellular_Arduino_Library.h\"\n\n// Uncomment the line below that you need for Serial on your platform\n#define mySerial Serial1\n// SoftwareSerial mySerial(16, 17);\n\n// Uncomment the module you're using. If your module is not listed below, then\n// it's not supported for this example\nSparkFun_ublox_Cellular myModule; // This example works with all modules, so the base class can be used\n// SparkFun_ublox_SARA_R5 myModule; // Base SARA-R5 class\n// SparkFun_ublox_SARA_R500S myModule;\n// SparkFun_ublox_SARA_R500S_01B myModule;\n// SparkFun_ublox_SARA_R500S_61B myModule;\n// SparkFun_ublox_SARA_R510M8S_61B myModule;\n// SparkFun_ublox_SARA_R510S myModule;\n// SparkFun_ublox_LARA_R6 myModule; // Base LARA-R6 class\n// SparkFun_ublox_LARA_R6001 myModule;\n// SparkFun_ublox_LARA_R6001D myModule;\n// SparkFun_ublox_LARA_R6401 myModule;\n// SparkFun_ublox_LARA_R6401D myModule;\n// SparkFun_ublox_LARA_R6801_00B myModule;\n// SparkFun_ublox_LARA_R6801D myModule;\n\n// Map SIM states to more readable strings\nString simStateString[] = {\n    \"Not present\",     // 0\n    \"PIN needed\",      // 1\n    \"PIN blocked\",     // 2\n    \"PUK blocked\",     // 3\n    \"Not operational\", // 4\n    \"Restricted\",      // 5\n    \"Operational\"      // 6\n};\n\n// processSIMstate is provided to the u-blox cellular library via a\n// callback setter -- setSIMstateReadCallback. (See setup())\nvoid processSIMstate(UBX_CELL_sim_states_t state)\n{\n    Serial.println();\n    Serial.print(F(\"SIM state:           \"));\n    Serial.print(String(state));\n    Serial.println();\n}\n\nvoid setup()\n{\n    Serial.begin(115200); // Start the serial console\n\n    // Wait for user to press key to begin\n    Serial.println(F(\"u-blox Cellular Example 1 - Device Identification\"));\n    Serial.println(F(\"Press any key to begin\"));\n\n    while (!Serial.available()) // Wait for the user to press a key (send any serial character)\n        ;\n    while (Serial.available()) // Empty the serial RX buffer\n        Serial.read();\n\n    Serial.println(F(\"Beginning...\"));\n\n    // myModule.enableDebugging(); // Uncomment this line to enable helpful debug messages on Serial\n\n    // For the MicroMod Asset Tracker, we need to invert the power pin so it pulls high instead of low\n    // Uncomment the next line if required\n    // myModule.invertPowerPin(true);\n\n    // Initialize the module\n    if (myModule.begin(mySerial, UBX_CELL_DEFAULT_BAUD_RATE))\n    {\n        Serial.println(F(\"Module connected!\"));\n    }\n    else\n    {\n        Serial.println(F(\"Unable to communicate with the module.\"));\n        Serial.println(F(\"Manually power-on (hold the module's On button for 3 seconds) and try again.\"));\n        while (1)\n            ; // Loop forever on fail\n    }\n    Serial.println();\n\n    Serial.println(\"Manufacturer ID:     \" + String(myModule.getManufacturerID()));\n    Serial.println(\"Model ID:            \" + String(myModule.getModelID()));\n    Serial.println(\"Firmware Version:    \" + String(myModule.getFirmwareVersion()));\n    Serial.println(\"Product Serial No.:  \" + String(myModule.getSerialNo()));\n    Serial.println(\"IMEI:                \" + String(myModule.getIMEI()));\n    Serial.println(\"IMSI:                \" + String(myModule.getIMSI()));\n    Serial.println(\"SIM CCID:            \" + String(myModule.getCCID()));\n    Serial.println(\"Subscriber No.:      \" + String(myModule.getSubscriberNo()));\n    Serial.println(\"Capabilities:        \" + String(myModule.getCapabilities()));\n\n    // Set a callback to return the SIM state once requested\n    myModule.setSIMstateReportCallback(&amp;processSIMstate);\n    // Now enable SIM state reporting for states 0 to 6 (by setting the reporting mode LSb)\n    if (myModule.setSIMstateReportingMode(1) == UBX_CELL_SUCCESS)\n        Serial.println(\"SIM state reports requested...\");\n    // You can disable the SIM staus reports again by calling assetTracker.setSIMstateReportingMode(0)\n}\n\nvoid loop()\n{\n    myModule.poll(); // Keep processing data from the module so we can extract the SIM status\n}\n</code></pre> <p>Serial Port Selection</p> <p>This and all following examples default to use <code>Serial1</code> for serial communication between the LTE Stick and microcontroller. If your selected microcontroller does not have this serial port, uncomment the following line and, if necessary, adjust the pins set for software serial depending on the software serial library limitations.</p> <pre><code>    // SoftwareSerial mySerial(16, 17);\n</code></pre> <p>Select your board (SparkFun Thing Plus ESP32 if you're following along with this tutorial verbatim) and Port and click the \"Upload\" button. When the code finishes compiling and uploading, open the serial monitor with the baud set to 115200. The code waits on a user prompt to begin so press any key when prompted in the serial monitor and you should see the device information and SIM status print out.</p>"},{"location":"examples/#example-2-network-info","title":"Example 2 - Network Info","text":"<p>The second example verifies the LARA-R6 is receiving an LTE signal on a selected network and prints out the network information and IDs. The code creates the LARA-R6 object and assigns a network operator value.</p> Example 2 -Network Info <pre><code>#include \"SparkFun_u-blox_Cellular_Arduino_Library.h\"\n\n// Uncomment the line below that you need for Serial on your platform\n#define mySerial Serial1\n// SoftwareSerial mySerial(16, 17);\n\n// Uncomment the module you're using. If your module is not listed below, then\n// it's not supported for this example\nSparkFun_ublox_Cellular myModule; // This example works with all modules, so the base class can be used\n// SparkFun_ublox_SARA_R5 myModule; // Base SARA-R5 class\n// SparkFun_ublox_SARA_R500S myModule;\n// SparkFun_ublox_SARA_R500S_01B myModule;\n// SparkFun_ublox_SARA_R500S_61B myModule;\n// SparkFun_ublox_SARA_R510M8S_61B myModule;\n// SparkFun_ublox_SARA_R510S myModule;\n// SparkFun_ublox_LARA_R6 myModule; // Base LARA-R6 class\n// SparkFun_ublox_LARA_R6001 myModule;\n// SparkFun_ublox_LARA_R6001D myModule;\n// SparkFun_ublox_LARA_R6401 myModule;\n// SparkFun_ublox_LARA_R6401D myModule;\n// SparkFun_ublox_LARA_R6801_00B myModule;\n// SparkFun_ublox_LARA_R6801D myModule;\n\n// Map registration status messages to more readable strings\nString registrationString[] = {\n    \"Not registered\",                        // 0\n    \"Registered, home\",                      // 1\n    \"Searching for operator\",                // 2\n    \"Registration denied\",                   // 3\n    \"Registration unknown\",                  // 4\n    \"Registered, roaming\",                   // 5\n    \"Registered, home (SMS only)\",           // 6\n    \"Registered, roaming (SMS only)\",        // 7\n    \"Registered, emergency service only\",    // 8\n    \"Registered, home, CSFB not preferred\",  // 9\n    \"Registered, roaming, CSFB not prefered\" // 10\n};\n\n// If you are based in Europe, you will (probably) need to select MNO_STD_EUROPE\nconst mobile_network_operator_t MOBILE_NETWORK_OPERATOR = MNO_GLOBAL;\n\nvoid setup()\n{\n    Serial.begin(115200); // Start the serial console\n\n    // Wait for user to press key to begin\n    Serial.println(F(\"u-blox Cellular Example 2 - Network Info\"));\n    Serial.println(F(\"Press any key to begin\"));\n\n    while (!Serial.available()) // Wait for the user to press a key (send any serial character)\n        ;\n    while (Serial.available()) // Empty the serial RX buffer\n        Serial.read();\n\n    Serial.println(F(\"Beginning...\"));\n\n    // myModule.enableDebugging(); // Uncomment this line to enable helpful debug messages on Serial\n\n    // For the MicroMod Asset Tracker, we need to invert the power pin so it pulls high instead of low\n    // Uncomment the next line if required\n    // myModule.invertPowerPin(true);\n\n    // Initialize the module\n    if (myModule.begin(mySerial, UBX_CELL_DEFAULT_BAUD_RATE))\n    {\n        Serial.println(F(\"Module connected!\"));\n    }\n    else\n    {\n        Serial.println(F(\"Unable to communicate with the module.\"));\n        Serial.println(F(\"Manually power-on (hold the module's On button for 3 seconds) and try again.\"));\n        while (1)\n            ; // Loop forever on fail\n    }\n    Serial.println();\n\n    if (!myModule.setNetworkProfile(MOBILE_NETWORK_OPERATOR))\n    {\n        Serial.println(F(\"Error setting network. Try cycling the power.\"));\n        while (1)\n            ;\n    }\n\n    Serial.println(F(\"Network profile set. Ready to go!\"));\n\n    // RSSI: Received signal strength:\n    Serial.println(\"RSSI: \" + String(myModule.rssi()));\n    // Registration Status\n    int regStatus = myModule.registration();\n    if ((regStatus &gt;= 0) &amp;&amp; (regStatus &lt;= 10))\n    {\n        Serial.println(\"Network registration: \" + registrationString[regStatus]);\n    }\n\n    // Print the Context IDs, Access Point Names and IP Addresses\n    Serial.println(F(\"Available PDP (Packet Data Protocol) APNs (Access Point Names) and IP Addresses:\"));\n    Serial.println(F(\"Context ID:\\tAPN Name:\\tIP Address:\"));\n    for (int cid = 0; cid &lt; UBX_CELL_NUM_PDP_CONTEXT_IDENTIFIERS; cid++)\n    {\n        String apn = \"\";\n        IPAddress ip(0, 0, 0, 0);\n        myModule.getAPN(cid, &amp;apn, &amp;ip);\n        if (apn.length() &gt; 0)\n        {\n            Serial.print(cid);\n            Serial.print(F(\"\\t\\t\"));\n            Serial.print(apn);\n            Serial.print(F(\"\\t\"));\n            Serial.println(ip);\n        }\n    }\n\n    Serial.println();\n\n    if (regStatus &gt; 0)\n    {\n        Serial.println(F(\"All set. Go to the next example!\"));\n    }\n}\n\nvoid loop()\n{\n    // Do nothing. Now that we're registered move on to the next example.\n}\n</code></pre> <p>After uploading the code, open a terminal window with the baud set to 115200 and enter any key to start the example. After initializing everything needed, the code attempts to set the Network Profile to the Mobile Network Operator entered. If successful, the code prints out the RSSI (Received Signal Strength), Network Registration Status and Context IDs, Access Point Names and IP Addresses.</p>"},{"location":"examples/#example-3-register-operator","title":"Example 3 - Register Operator","text":"<p>Example 4 checks to see if the LARA-R6 is connected to a network and lets you register on a different network if available and if the SIM supports this. This example can also be used to list all the LTE operators the LARA-R6 can detect. Note, you can only connect to networks supported by your SIM card. Refer to your SIM card manufacturer's documentation for supported networks.</p> Example 3 - Register Operator <pre><code>#include \"SparkFun_u-blox_Cellular_Arduino_Library.h\"\n\n// Uncomment the line below that you need for Serial on your platform\n#define mySerial Serial1\n// SoftwareSerial mySerial(16, 17);\n\n// Uncomment the module you're using. If your module is not listed below, then\n// it's not supported for this example\nSparkFun_ublox_Cellular myModule; // This example works with all modules, so the base class can be used\n// SparkFun_ublox_SARA_R5 myModule; // Base SARA-R5 class\n// SparkFun_ublox_SARA_R500S myModule;\n// SparkFun_ublox_SARA_R500S_01B myModule;\n// SparkFun_ublox_SARA_R500S_61B myModule;\n// SparkFun_ublox_SARA_R510M8S_61B myModule;\n// SparkFun_ublox_SARA_R510S myModule;\n// SparkFun_ublox_LARA_R6 myModule; // Base LARA-R6 class\n// SparkFun_ublox_LARA_R6001 myModule;\n// SparkFun_ublox_LARA_R6001D myModule;\n// SparkFun_ublox_LARA_R6401 myModule;\n// SparkFun_ublox_LARA_R6401D myModule;\n// SparkFun_ublox_LARA_R6801_00B myModule;\n// SparkFun_ublox_LARA_R6801D myModule;\n\n// Map registration status messages to more readable strings\nString registrationString[] = {\n    \"Not registered\",                        // 0\n    \"Registered, home\",                      // 1\n    \"Searching for operator\",                // 2\n    \"Registration denied\",                   // 3\n    \"Registration unknown\",                  // 4\n    \"Registered, roaming\",                   // 5\n    \"Registered, home (SMS only)\",           // 6\n    \"Registered, roaming (SMS only)\",        // 7\n    \"Registered, emergency service only\",    // 8\n    \"Registered, home, CSFB not preferred\",  // 9\n    \"Registered, roaming, CSFB not prefered\" // 10\n};\n\n// If you are based in Europe, you will (probably) need to select MNO_STD_EUROPE\nconst mobile_network_operator_t MOBILE_NETWORK_OPERATOR = MNO_GLOBAL;\n\nconst String MOBILE_NETWORK_STRINGS[] = {\"default (Undefined/Regulatory)\",\n                                         \"SIM ICCID\",\n                                         \"AT&amp;T\",\n                                         \"Verizon\",\n                                         \"Telstra\",\n                                         \"T-Mobile US\",\n                                         \"China Telecom\",\n                                         \"Sprint\",\n                                         \"Vodafone\",\n                                         \"NTT DoCoMo\",\n                                         \"Telus\",\n                                         \"SoftBank\",\n                                         \"Deutsche Telekom\",\n                                         \"US Cellular\",\n                                         \"SKT\",\n                                         \"global (factory default)\",\n                                         \"standard Europe\",\n                                         \"standard Europe No-ePCO\",\n                                         \"NOT RECOGNIZED\"};\n\n// Convert the operator number into an index for MOBILE_NETWORK_STRINGS\nint convertOperatorNumber(mobile_network_operator_t mno)\n{\n    switch (mno)\n    {\n    case 0:\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n        return ((int)mno);\n    case 8:\n        return 7;\n    case 19:\n        return 8;\n    case 20:\n        return 9;\n    case 21:\n        return 10;\n    case 28:\n        return 11;\n    case 31:\n        return 12;\n    case 32:\n        return 13;\n    case 39:\n        return 14;\n    case 90:\n        return 15;\n    case 100:\n        return 16;\n    case 101:\n        return 17;\n    default: // NOT RECOGNIZED\n        return 18;\n    }\n}\n\n// This defines the size of the ops struct array. To narrow the operator\n// list, set MOBILE_NETWORK_OPERATOR to AT&amp;T, Verizon etc. instead\n// of MNO_SW_DEFAULT.\n#define MAX_OPERATORS 10\n\n// Uncomment this line if you want to be able to communicate directly with the module in the main loop\n// #define DEBUG_PASSTHROUGH_ENABLED\n\nvoid setup()\n{\n    int opsAvailable;\n    struct operator_stats ops[MAX_OPERATORS];\n    String currentOperator = \"\";\n    bool newConnection = true;\n\n    Serial.begin(115200); // Start the serial console\n\n    // Wait for user to press key to begin\n    Serial.println(F(\"u-blox Cellular Example 3 - Register Operator\"));\n    Serial.println(F(\"Press any key to begin\"));\n\n    while (!Serial.available()) // Wait for the user to press a key (send any serial character)\n        ;\n    while (Serial.available()) // Empty the serial RX buffer\n        Serial.read();\n\n    Serial.println(F(\"Beginning...\"));\n\n    // myModule.enableDebugging(); // Uncomment this line to enable helpful debug messages on Serial\n\n    // For the MicroMod Asset Tracker, we need to invert the power pin so it pulls high instead of low\n    // Uncomment the next line if required\n    // myModule.invertPowerPin(true);\n\n    // Initialize the module\n    if (myModule.begin(mySerial, UBX_CELL_DEFAULT_BAUD_RATE))\n    {\n        Serial.println(F(\"Module connected!\"));\n    }\n    else\n    {\n        Serial.println(F(\"Unable to communicate with the module.\"));\n        Serial.println(F(\"Manually power-on (hold the module's On button for 3 seconds) and try again.\"));\n        while (1)\n            ; // Loop forever on fail\n    }\n    Serial.println();\n\n    // First check to see if we're already connected to an operator:\n    if (myModule.getOperator(&amp;currentOperator) == UBX_CELL_SUCCESS)\n    {\n        Serial.print(F(\"Already connected to: \"));\n        Serial.println(currentOperator);\n        // If already connected provide the option to type y to connect to new operator\n        Serial.println(F(\"Press y to connect to a new operator, or any other key to continue.\\r\\n\"));\n        while (!Serial.available())\n            ;\n        if (Serial.read() != 'y')\n        {\n            newConnection = false;\n        }\n        else\n        {\n            myModule.deregisterOperator(); // Deregister from the current operator so we can connect to a new one\n        }\n        while (Serial.available())\n            Serial.read();\n    }\n\n    if (newConnection)\n    {\n        // Set MNO to either Verizon, T-Mobile, AT&amp;T, Telstra, etc.\n        // This will narrow the operator options during our scan later\n        Serial.println(F(\"Setting mobile-network operator\"));\n        if (myModule.setNetworkProfile(MOBILE_NETWORK_OPERATOR))\n        {\n            Serial.print(F(\"Set mobile network operator to \"));\n            Serial.println(MOBILE_NETWORK_STRINGS[convertOperatorNumber(MOBILE_NETWORK_OPERATOR)] + \"\\r\\n\");\n        }\n        else\n        {\n            Serial.println(F(\"Error setting MNO. Try cycling the power. Freezing...\"));\n            while (1)\n                ;\n        }\n\n        // Wait for user to press button before initiating network scan.\n        Serial.println(F(\"Press any key scan for networks..\"));\n        serialWait();\n\n        Serial.println(F(\"Scanning for networks...this may take up to 3 minutes\\r\\n\"));\n        // myModule.getOperators takes in a operator_stats struct pointer and max number of\n        // structs to scan for, then fills up those objects with operator names and numbers\n        opsAvailable = myModule.getOperators(ops, MAX_OPERATORS); // This will block for up to 3 minutes\n\n        if (opsAvailable &gt; 0)\n        {\n            // Pretty-print operators we found:\n            Serial.println(\"Found \" + String(opsAvailable) + \" operators:\");\n            printOperators(ops, opsAvailable);\n            Serial.println(String(opsAvailable + 1) + \": use automatic selection\");\n            Serial.println();\n\n            // Wait until the user presses a key to initiate an operator connection\n            Serial.println(\"Press 1-\" + String(opsAvailable + 1) + \" to select an operator.\");\n            char c = 0;\n            bool selected = false;\n            while (!selected)\n            {\n                while (!Serial.available())\n                    ;\n                c = Serial.read();\n                int selection = c - '0';\n                if ((selection &gt;= 1) &amp;&amp; (selection &lt;= (opsAvailable + 1)))\n                {\n                    selected = true;\n                    Serial.println(\"Connecting to option \" + String(selection));\n                    if (selection == (opsAvailable + 1))\n                    {\n                        if (myModule.automaticOperatorSelection() == UBX_CELL_SUCCESS)\n                        {\n                            Serial.println(\"Automatic operator selection: successful\\r\\n\");\n                        }\n                        else\n                        {\n                            Serial.println(\n                                F(\"Automatic operator selection: error. Reset and try again, or try another network.\"));\n                        }\n                    }\n                    else\n                    {\n                        if (myModule.registerOperator(ops[selection - 1]) == UBX_CELL_SUCCESS)\n                        {\n                            Serial.println(\"Network \" + ops[selection - 1].longOp + \" registered\\r\\n\");\n                        }\n                        else\n                        {\n                            Serial.println(\n                                F(\"Error connecting to operator. Reset and try again, or try another network.\"));\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            Serial.println(F(\"Did not find an operator. Double-check SIM and antenna, reset and try again, or try \"\n                             \"another network.\"));\n            while (1)\n                ;\n        }\n    }\n\n    // At the very end print connection information\n    printInfo();\n}\n\nvoid loop()\n{\n    // Loop provides a debugging interface.\n    if (mySerial.available())\n    {\n        Serial.write((char)mySerial.read());\n    }\n#ifdef DEBUG_PASSTHROUGH_ENABLED\n    if (Serial.available())\n    {\n        mySerial.write((char)Serial.read());\n    }\n#endif\n}\n\nvoid printInfo(void)\n{\n    String currentApn = \"\";\n    IPAddress ip(0, 0, 0, 0);\n    String currentOperator = \"\";\n\n    Serial.println(F(\"Connection info:\"));\n    Serial.println(F(\"Context ID:\\tAPN Name:\\tIP Address:\"));\n    for (int cid = 0; cid &lt; UBX_CELL_NUM_PDP_CONTEXT_IDENTIFIERS; cid++)\n    {\n        String apn = \"\";\n        IPAddress ip(0, 0, 0, 0);\n        myModule.getAPN(cid, &amp;apn, &amp;ip);\n        if (apn.length() &gt; 0)\n        {\n            Serial.print(cid);\n            Serial.print(F(\"\\t\\t\"));\n            Serial.print(apn);\n            Serial.print(F(\"\\t\"));\n            Serial.println(ip);\n        }\n    }\n\n    // Operator name or number\n    if (myModule.getOperator(&amp;currentOperator) == UBX_CELL_SUCCESS)\n    {\n        Serial.print(F(\"Operator: \"));\n        Serial.println(currentOperator);\n    }\n\n    // Received signal strength\n    Serial.println(\"RSSI: \" + String(myModule.rssi()));\n    Serial.println();\n}\n\nvoid printOperators(struct operator_stats *ops, int operatorsAvailable)\n{\n    for (int i = 0; i &lt; operatorsAvailable; i++)\n    {\n        Serial.print(String(i + 1) + \": \");\n        Serial.print(ops[i].longOp + \" (\" + String(ops[i].numOp) + \") - \");\n        switch (ops[i].stat)\n        {\n        case 0:\n            Serial.print(F(\"UNKNOWN\"));\n            break;\n        case 1:\n            Serial.print(F(\"AVAILABLE\"));\n            break;\n        case 2:\n            Serial.print(F(\"CURRENT\"));\n            break;\n        case 3:\n            Serial.print(F(\"FORBIDDEN\"));\n            break;\n        }\n        switch (ops[i].act)\n        {\n        case 0:\n            Serial.print(F(\" - GSM\"));\n            break;\n        case 2:\n            Serial.print(F(\" - UTRAN\"));\n            break;\n        case 3:\n            Serial.print(F(\" - GSM/GPRS with EDGE\"));\n            break;\n        case 7:\n            Serial.print(F(\" - LTE\")); // SARA-R5 only supports LTE\n            break;\n        }\n        Serial.println();\n    }\n    Serial.println();\n}\n\nvoid serialWait()\n{\n    while (Serial.available())\n        Serial.read();\n    while (!Serial.available())\n        ;\n    delay(100);\n    while (Serial.available())\n        Serial.read();\n}\n</code></pre>"},{"location":"examples/#example-5-ping","title":"Example 5 - Ping","text":"<p>The eighth example tests the LTE Stick's data connection by a standard server ping. Open a terminal window and follow the prompts then enter a server to ping. Any valid web address like www.google.com or www.sparkfun.com works. If the ping succeeds the code prints out the time to send and receive the ping in milliseconds.</p> Example 5 - Ping <pre><code>#include \"SparkFun_u-blox_Cellular_Arduino_Library.h\"\n\n// Uncomment the line below that you need for Serial on your platform\n#define mySerial Serial1\n// SoftwareSerial mySerial(16, 17);\n\n// Uncomment the module you're using. If your module is not listed below, then\n// it's not supported for this example\nSparkFun_ublox_Cellular myModule; // This example works with all modules, so the base class can be used\n// SparkFun_ublox_SARA_R5 myModule; // Base SARA-R5 class\n// SparkFun_ublox_SARA_R500S myModule;\n// SparkFun_ublox_SARA_R500S_01B myModule;\n// SparkFun_ublox_SARA_R500S_61B myModule;\n// SparkFun_ublox_SARA_R510M8S_61B myModule;\n// SparkFun_ublox_SARA_R510S myModule;\n// SparkFun_ublox_LARA_R6 myModule; // Base LARA-R6 class\n// SparkFun_ublox_LARA_R6001 myModule;\n// SparkFun_ublox_LARA_R6001D myModule;\n// SparkFun_ublox_LARA_R6401 myModule;\n// SparkFun_ublox_LARA_R6401D myModule;\n// SparkFun_ublox_LARA_R6801_00B myModule;\n// SparkFun_ublox_LARA_R6801D myModule;\n\nString pingMe = \"\"; // The name of the server we are going to ping\n\n// processPingResult is provided to the u-blox cellular library via a\n// callback setter -- setPingCallback. (See the end of setup())\nvoid processPingResult(int retry, int p_size, String remote_hostname, IPAddress ip, int ttl, long rtt)\n{\n    Serial.println();\n    Serial.print(F(\"Ping Result:  Retry #:\"));\n    Serial.print(retry);\n    Serial.print(F(\"  Ping Size (Bytes):\"));\n    Serial.print(p_size);\n    Serial.print(F(\"  Remote Host:\\\"\"));\n    Serial.print(remote_hostname);\n    Serial.print(F(\"\\\"  IP Address:\\\"\"));\n    Serial.print(String(ip[0]));\n    Serial.print(F(\".\"));\n    Serial.print(String(ip[1]));\n    Serial.print(F(\".\"));\n    Serial.print(String(ip[2]));\n    Serial.print(F(\".\"));\n    Serial.print(String(ip[3]));\n    Serial.print(F(\"\\\"  Time To Live (hops):\"));\n    Serial.print(ttl);\n    Serial.print(F(\"  Round Trip (ms):\"));\n    Serial.print(rtt);\n    Serial.println();\n}\n\nvoid setup()\n{\n    String currentOperator = \"\";\n\n    Serial.begin(115200); // Start the serial console\n\n    // Wait for user to press key to begin\n    Serial.println(F(\"u-blox Cellular Example 5 - Ping\"));\n    Serial.println(F(\"Press any key to begin\"));\n\n    while (!Serial.available()) // Wait for the user to press a key (send any serial character)\n        ;\n    while (Serial.available()) // Empty the serial RX buffer\n        Serial.read();\n\n    Serial.println(F(\"Beginning...\"));\n\n    // myModule.enableDebugging(); // Uncomment this line to enable helpful debug messages on Serial\n\n    // For the MicroMod Asset Tracker, we need to invert the power pin so it pulls high instead of low\n    // Uncomment the next line if required\n    // myModule.invertPowerPin(true);\n\n    // Initialize the module\n    if (myModule.begin(mySerial, UBX_CELL_DEFAULT_BAUD_RATE))\n    {\n        Serial.println(F(\"Module connected!\"));\n    }\n    else\n    {\n        Serial.println(F(\"Unable to communicate with the module.\"));\n        Serial.println(F(\"Manually power-on (hold the module's On button for 3 seconds) and try again.\"));\n        while (1)\n            ; // Loop forever on fail\n    }\n    Serial.println();\n\n    // First check to see if we're connected to an operator:\n    if (myModule.getOperator(&amp;currentOperator) == UBX_CELL_SUCCESS)\n    {\n        Serial.print(F(\"Connected to: \"));\n        Serial.println(currentOperator);\n    }\n    else\n    {\n        Serial.print(F(\"The module is not yet connected to an operator. Please use the previous examples to connect. \"\n                       \"Or wait and retry. Freezing...\"));\n        while (1)\n            ; // Do nothing more\n    }\n\n    Serial.println();\n    Serial.println(F(\"*** Set the Serial Monitor line ending to Newline ***\"));\n\n    Serial.println();\n    Serial.println(F(\"Enter the name of the server you want to ping (followed by LF / Newline): \"));\n    Serial.println(F(\"Example: \\\"www.google.com\\\"\"));\n\n    // Set a callback to process the Ping result\n    myModule.setPingCallback(&amp;processPingResult);\n}\n\nvoid loop()\n{\n    if (Serial.available())\n    {\n        char c = Serial.read();\n        if (c == '\\n')\n        {\n            // Newline received so let's do that ping!\n            Serial.println(\"Pinging \" + pingMe + \"...\");\n            myModule.ping(pingMe); // Use the default parameters\n\n            // Use custom parameters\n            // int retries = 4; // number of retries\n            // int p_size = 32; // packet size (bytes)\n            // unsigned long timeout = 5000; // timeout (ms)\n            // int ttl = 32; // Time To Live\n            // myModule.ping(pingMe, retries, p_size, timeout, ttl);\n\n            pingMe = \"\"; // Clear the server name for the next try\n        }\n        else\n        {\n            // Add serial characters to the server address\n            pingMe += c;\n        }\n    }\n\n    myModule.poll(); // Keep processing data from the module so we can catch the Ping result\n}\n</code></pre> <p>If the ping fails, try uncommenting this line that enables debugging over serial:</p> <pre><code>// myModule.enableDebugging(); // Uncomment this line to enable helpful debug messages on Serial\n</code></pre> <p>Upload the code again, retry the ping and look for any messages that include +UUPINGER:. Refer to the list of Ping error codes in Appendix A. 9 of the AT Command Reference to decipher the error code.</p>"},{"location":"examples/#further-examples","title":"Further Examples","text":"<p>These examples perform the basic tests for making sure everything is working properly on the LTE Stick but the SparkFun u-blox Cellular Arduino Library includes many more examples to take full advantage of the LARA-R6's capabilities including audio examples for playing audio tones and phonecall control. The audio examples require external hardware including an audio codec and are beyond the scope of this tutorial.</p>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":""},{"location":"hardware_assembly/#basic-assembly","title":"Basic Assembly","text":"<p>The fastest way to get up and running with the LTE Stick is by connecting it to a computer through the USB-C connector and then using u-blox's mcenter software. </p> <p></p>"},{"location":"hardware_assembly/#soldered-assembly","title":"Soldered Assembly","text":"New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide. <p>      How to Solder: Through-Hole Soldering </p></p> <p>We specifically designed this board to fit on a breadboard with headers soldered to it for easy prototype circuit building with the LARA-R6. This assembly is strongly recommended for those who wish to use the LTE Stick with the SparkFun u-blox Cellular Library to make connections between the LTE Stick, microcontroller, and other hardware (where necessary).</p> <p>Note</p> <p>This assembly assumes the use of the SparkFun Thing Plus - ESP32 WROOM (USB-C) to make serial connections between the boards. If you are using a different microcontroller, adjust the serial connections between the two boards to the appropriate pins.</p> <p>Start by soldering male headers to both sets of PTH pins on either side of the board. Next, connect the TXD and RXD pins on the LTE Stick to the Serial1 pins on the Thing Plus - ESP32 (USB-C). Finally, connect VUSB on the Thing Plus to VIN on the LTE Stick and connect the ground pins on both boards to each other. With everything wired up, your completed assembly should resemble the photo below:</p> <p></p> Having trouble seeing the connections in detail? Click on the image for a larger view."},{"location":"hardware_overview/","title":"Hardware Overview","text":""},{"location":"hardware_overview/#lara-r6-lte-module","title":"LARA-R6 LTE Module","text":"<p>The heart of the LTE Stick is the LARA-R6 LTE Cat 1 module from u-blox. The LARA-R6401 supports data, SMS, and voice over LTE bands and works with most major North American carriers (Verizon, TMobile, AT&amp;T, etc.). </p> <p></p> <p>The LARA-R6 has the following interfaces: USB, 2x UART, I<sup>2</sup>S, I<sup>2</sup>C, SIM interface, and nine GPIO pins. It also has a host of features including device security through Root of Trust (RoT) with secure boot and update, firmware updates both over the air (uFOTA) and through AT commands, dynamic antenna tuning, jamming detection, and much more. For a complete overview of these features and other information on the LARA-R6401, refer to the datasheet. The R6401 supports LTE FDD bands from 600 MHz to 1900 MHz (2, 4, 5, 12, 13, 14, 66, and 71).</p>"},{"location":"hardware_overview/#pinout","title":"Pinout","text":"<p>The board breaks out the LARA-R6's UART and I<sup>2</sup>S interfaces as well as the Power On, Reset and voltage pins to a pair of 0.1\"-spaced PTH (plated through-hole) headers.</p> <p></p> <p>The list below outlines the functionality of pins broken out on the LTE Stick:</p> <ul> <li>PWR_On - LARA-R6 power control pin</li> <li>Reset - LARA-R6 reset pin</li> <li>RXD - UART data out</li> <li>TXD - UART data in</li> <li>CTS - UART clear to send</li> <li>RTS - UART ready to send</li> <li>RXA - I<sup>2</sup>S receive data</li> <li>CLK - I<sup>2</sup>S clock</li> <li>TXA - I<sup>2</sup>S transmit data</li> <li> <p>WA - I<sup>2</sup>S word alignment</p> </li> <li> <p>VIN - 5V </p> </li> <li>3.3V - Regulated 3.3V</li> <li>1.8 - Regulated 1.8V  </li> </ul>"},{"location":"hardware_overview/#test-points","title":"Test Points","text":"<p>Warning</p> <p>All three of these clusters have test point connections for 1.8V and GND and connect directly to the associated pins on the LARA-R6. These pins are not level-shifted and run at 1.8V logic. Take care when interacting with these pins to avoid damaging the signals they connect to.</p> <p>The LTE Stick also has several other interfaces broken out to test points for advanced users to solder to. These test points are small copper pads grouped into three clusters labeled: I2C, GPIO, and UART2. They do not have individual pin labels so refer to the board files (ZIP) to identify the pin locations.</p> <p></p> <p>The I2C cluster contains the LARA's I<sup>2</sup>C bus pins (SDA/SCL) as well as GPIO4. The GPIO cluster contains GPIO1, GPIO2, GPIO3, and GPIO6. All GPIO pins can act as a generic GPIO signal but some have alternate functions outlined in section 2.8 of the LARA-R6 datasheet. </p> <p>The UART2 cluster contains the LARA's UART2 pins: TX2, RX2, CTS2, and RTS2. This interface is disabled by default and can be activated by the dedicated AT command. Refer to section 18.12 of the AT commands manual and section 1.9.1.2 of the integration manual for complete information on using these pins. Users also should open the DTR solder jumper to use this pin for TX2 (refer to the Solder Jumpers section for more information on the DTR jumper).</p>"},{"location":"hardware_overview/#connectorsconnections","title":"Connectors/Connections","text":"<p>Let's take a closer look at the connectors on the LTE Stick.</p>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>The LTE Stick uses a USB-C connector for primary power input and serial communication. The board also has dedicated PTHs for the three voltage inputs on the board: 5V(VIN), 3.3V, and 1.8V along with PTHs for Ground.</p> <p></p>"},{"location":"hardware_overview/#antenna-connections","title":"Antenna Connections","text":"<p>The LARA-R6 has two antenna connections; Primary (ANT1) and Secondary (ANT2). The Primary antenna functions as the main antenna interface and supports TX/RX transmissions. The Secondary antenna communicates over RX only for the LTE / 3G RX diversity configuration. </p> <p></p>"},{"location":"hardware_overview/#nano-sim-card-slot","title":"Nano SIM Card Slot","text":"<p>The LTE Stick has an on-board Nano SIM card slot. The LTE Stick uses the LARA-R6401 which works with most major North American carriers (Verizon, TMobile, AT&amp;T, etc.).   </p> <p></p>"},{"location":"hardware_overview/#buttons","title":"Buttons","text":"<p>The board has two buttons labeled ON and RST. The ON button connects to the LARA-R6 PWR_On pin which turns the module on and off. Tap it once to turn the module on and hold it down for three seconds to turn it off. The RST button connects to the LARA-R6's reset line and resets the module when pressed.</p> <p></p>"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>The LTE Stick has a pair of red LEDs labeled PWR and ON. The PWR LED indicates whenever the 3.3V rail is powered through USB or the VIN/3.3V PTH pins. The ON LED indicates when the LARA-R6 is powered up. </p> <p></p>"},{"location":"hardware_overview/#solder-jumpers","title":"Solder Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction! <p>      How to Work with Jumper Pads and PCB Traces </p></p> <p>The LTE Stick has four solder jumpers labeled PWR_LED, ON_LED, SHLD, and DTR. </p> <p></p> <p>The PWR_LED and ON_LED jumpers complete the power circuits for their associated LEDs (PWR and ON). They are CLOSED by default. Open them to disable these LEDs to help conserve power. The SHLD jumper connects the USB-C connector's shield pin to ground. Open it to isolate the shield pin. The DTR jumper is CLOSED by default and pulls the LARA-R6 DTR pin to ground (LOW) to function as UART data terminal ready. Open the jumper to use the DTR pin for its secondary use as TX2 when using the UART2 test point cluster.</p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The board measures 3.25\" x 1.00\" (82.55mm x 25.40mm) with four mounting holes that fit a 4-40 screw.</p> <p></p> <p>Board dimensions for the SparkFun LTE Stick, in inches.</p> Need more measurements? <p>For more information about the board's dimensions, users can download the Eagle files for the board. These files can be opened in Eagle and additional measurements can be made with the dimensions tool.</p>  Eagle - Free Download! <p>Eagle is a CAD program for electronics that is free to use for hobbyists and students. However, it does require an account registration to utilize the software.</p> <p> Download fromAutodesk primary logo </p>  Dimensions Tool <p>This video from Autodesk demonstrates how to utilize the dimensions tool in Eagle, to include additional measurements:</p> <p> </p>"},{"location":"introduction/","title":"Introduction","text":"<ul> <li> <p> SparkFun LTE Stick - LARA-R6 SKU: CEL-23618 <p> </p> <p> </p> <li> <p>The SparkFun LTE Stick - LARA-R6 is a development and prototyping platform for the LARA-R6401 LTE module from ublox<sup>\u2122</sup>. The LTE Stick uses the LARA-R6401 version which supports both data and voice for North America and works with LTE bands used by these mobile networks: AT&amp;T, Verizon, T-Mobile, and FirstNet. The board includes a nanoSIM card slot for users to select their preferred network. Check with your network provider for compatibility with the LARA-R6.</p> <p>The LARA-R6 workss on multiple LTE FDD frequency bands (2, 4, 5, 12, 13, 14, 66, and 71) and includes a host of common features users expect from u-blox modules including uFOTA (over-the-air firmware update), Root of Trust, secure boot/update, jamming detection, antenna and SIM detection, and much more. </p> <p>The LTE Stick routes the UART and I<sup>2</sup>S interfaces to a 0.1\"-spaced plated-through-hole (PTH) header along with the Reset and Power On signals and we designed the board to specifically mount on to a breadboard for easy prototyping. The board has two SMA connectors for the LARA-R6's primary and secondary antennas.</p> <p> Purchase from SparkFun  </p> </li>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>The LTE Stick requires a few peripheral items including antennas, USB-C cable, and supported SIM card to get it up and running. Below are a few recommended options for each.</p>"},{"location":"introduction/#usb-c-cable","title":"USB-C Cable","text":"<p>For basic use and conifguration of the LTE Stick using AT commands or u-blox's m-center software you'll need USB-C cable to connect the dev board to your computer:</p> <ul> <li> <p> <p> </p> <p> USB 3.1 Cable A to C - 3 Foot CAB-14743 </p> <li> <p> <p> </p> <p> Reversible USB A to C Cable - 2m CAB-15424 </p>"},{"location":"introduction/#lte-antenna","title":"LTE Antenna","text":"<p>The LTE Stick has two SMA connectors for the Primary and Secondary antenna signals on the LARA-R6. The LARA-R6 only requires the Primary antenna for basic functionality but u-blox recommends connecting the Secondary antenna for best signal quality. We recommend using an antenna like the one below:</p> <ul> <li> <p> <p> </p> <p> LTE Hinged External Antenna - 698MHz-2.7GHz, SMA Male CEL-16432 </p>"},{"location":"introduction/#sim-card","title":"SIM Card","text":"<p>Finally, the LTE Stick requires a nano SIM card for cellular network connectivity. As mentioned above, the LTE Stick uses the LARA-R6401 module and supports only North American LTE networks and works with the AT&amp;T, Verizon, T-Mobile, and FirstNet cellular networks though make sure to check with your selected network provider for compatibility with the LARA-R6 before purchasing. The Hologram SIM card listed below works with the LARa-R6 for data and receiving SMS but not voice or sending SMS:</p> <ul> <li> <p> <p> </p> <p> Hologram SIM Card CEL-17117 </p>"},{"location":"introduction/#optional-materials","title":"Optional Materials","text":"<p>Using the LTE Stick with the SparkFun u-blox Cellular Arduino Library requires a connection to a microcontroller/development board. Below are a few options that will work with the LTE Stick out of the box.</p>"},{"location":"introduction/#development-boards","title":"Development Boards","text":"Logic Levels <p>The LTE Stick operates at 3.3V logic so make sure your chosen development board operates at the same logic level or use a level shifter.</p> <ul> <li> <p> <p> </p> <p> SparkFun Thing Plus - ESP32 WROOM (USB-C) DEV-20168 </p> <li> <p> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board DEV-19177 </p> <li> <p> <p> </p> <p> SparkFun Thing Plus - Artemis DEV-18158 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Pocket Development Board - ESP32-C6 DEV-22925 </p> <li> <p> <p> </p> <p> SparkFun ESP32 Qwiic Pro Mini DEV-23386 </p> <li> <p> <p> </p> <p> SparkFun RedBoard Artemis DEV-15444  </p> <p>If you prefer to use the LTE Stick with a development board or simply prefer a soldered connection or want to modify the solder jumpers on these Qwiic breakouts you you may need some of the products listed below:</p>"},{"location":"introduction/#soldering-tools-accessories","title":"Soldering Tools &amp; Accessories","text":"<ul> <li> <p> <p> </p> <p> Break Away Headers - Straight PRT-00116 </p> <li> <p> <p> </p> <p> SparkFun Beginner Tool Kit TOL-14681 </p> <li> <p> <p> </p> <p>Weller WLSK3012A Soldering Station TOL-22133 </p> <li> <p> <p> </p> <p>Solder Lead Free - 100-gram Spool TOL-09325 </p> <li> <p> <p> </p> <p> Hobby Knife TOL-09200 </p> <li> <p> <p> </p> <p>Chip Quik No-Clean Flux Pen - 10mL CAB-14579 </p>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>Before getting started with this Hookup Guide, you may want to read through the tutorials below if you are not familiar with the concepts covered in them or want a refresher. If you are using either of the Qwiic Shields linked above, we recommend reading through their respective Hookup Guides before continuing with this tutorial:</p> <ul> <li> <p> Serial Communication </p> </li> <li> <p> Logic Levels </p> </li> <li> <p> Installing Arduino IDE </p> </li> <li> <p> Installing an Arduino Library </p> </li> <li> <p> Serial Terminal Basics </p> </li> <li> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul>"},{"location":"mcenter/","title":"m-center Basics","text":"<p>The m-center application from u-blox is an excellent configuration and interaction tool for the LARA-R6 (and other cellular modules). It is only available on Windows so if you have a different operating system, you'll need to use another software solution like the SparkFun u-blox AT Command Arduino Library covered in the next sections. This section only covers a few of the basics to get started using the LTE Stick with m-center. Refer to u-blox's m-center User Guide for a complete overview of all of the application's features.</p>"},{"location":"mcenter/#download-m-center","title":"Download m-center","text":"<p>The m-center application is available from u-blox here. Click the button on that page to download the installer. Locate that file and follow the instructions to finish the installation process.</p> <p> u-blox m-center </p>"},{"location":"mcenter/#download-windows-drivers","title":"Download Windows Drivers","text":"<p>The LARA-R6 also requires a Windows USB driver download. Find it on u-blox's LARA-R6 Documentation &amp; Resources page or download the driver ZIP directly by clicking the button below:</p> <p> u-blox LARA-R6 Windows Driver (ZIP) </p> <p>Open the file once it downloads and follow the instructions to complete the driver installation.</p>"},{"location":"mcenter/#basic-lte-stick-connection-testing","title":"Basic LTE Stick Connection &amp; Testing","text":"<p>Now that everything is downloaded connect the LTE Stick over USB and press the \"On\" button to power up the LARA-R6, open m-center and you'll see this menu:</p> <p></p> <p>Next, click the \"Set Port\" button to select the COM port the LTE Stick is on. The LTE Stick has four port options in this menu as the screenshot below shows. Select the one for USB1 (labeled \"u-blox Modem USB1 AT and Data (COM#) or similar) and click \"Connect\". If you do not see any devices available or see unrelated ports, make sure the \"ON\" LED is illuminated on the LTE Stick and that the drivers finished installing.</p> <p></p> <p>After the board connects, m-center will display the LARA-R6's modem information including manufacturer, device ID, and firmware version. It also opens the terminal interface and prints out the device's response to the Generic set of AT commands similar to the screenshot below:</p> <p></p> <p>This basic printout lets you know most things are working but the main m-center menu also has several tabs at the top for testing other things such as network connection, firmware update (FOTA or AT command), SMS messages, and more. You can also click the \"Initialization\" button to initialize the LARA-R6 again or the \"Get info\" button to refresh the modem information and SIM status.</p>"},{"location":"mcenter/#network-operator-setup","title":"Network &amp; Operator Setup","text":"<p>Now that we have the LTE Stick connected and reporting the correct device information, it's time to connect to the cellular network and select the operator. Click the \"Cell Tower\" image in the top left to switch to the Network tab. In this tab, we can get the network information and operators list as well as the PSD (packet-switched-data profiles) though the PSD profiles are not necessary for basic use of the LARA-R6.</p> <p></p> <p>Click the \"Get List\" button to have the LARA-R6 report all available network operators for the connected SIM card. If no operators are selected, choose an available/preferred operator and you're all set to move on to using the LTE Stick on your cellular network. </p> <p></p> <p>That covers the basics of getting started with m-center. For more information, check out u-blox's m-center user guide or read on to the next section to learn how to use the LTE Stick with Arduino and the SparkFun u-blox Cellular Arduino Library.</p>"},{"location":"print_view/","title":"Introduction","text":"<ul> <li> <p> SparkFun LTE Stick - LARA-R6 SKU: CEL-23618 <p> </p> <p> </p> <li> <p>The SparkFun LTE Stick - LARA-R6 is a development and prototyping platform for the LARA-R6401 LTE module from ublox<sup>\u2122</sup>. The LTE Stick uses the LARA-R6401 version which supports both data and voice for North America and works with LTE bands used by these mobile networks: AT&amp;T, Verizon, T-Mobile, and FirstNet. The board includes a nanoSIM card slot for users to select their preferred network. Check with your network provider for compatibility with the LARA-R6.</p> <p>The LARA-R6 workss on multiple LTE FDD frequency bands (2, 4, 5, 12, 13, 14, 66, and 71) and includes a host of common features users expect from u-blox modules including uFOTA (over-the-air firmware update), Root of Trust, secure boot/update, jamming detection, antenna and SIM detection, and much more. </p> <p>The LTE Stick routes the UART and I<sup>2</sup>S interfaces to a 0.1\"-spaced plated-through-hole (PTH) header along with the Reset and Power On signals and we designed the board to specifically mount on to a breadboard for easy prototyping. The board has two SMA connectors for the LARA-R6's primary and secondary antennas.</p> <p> Purchase from SparkFun  </p> </li>"},{"location":"print_view/#required-materials","title":"Required Materials","text":"<p>The LTE Stick requires a few peripheral items including antennas, USB-C cable, and supported SIM card to get it up and running. Below are a few recommended options for each.</p>"},{"location":"print_view/#usb-c-cable","title":"USB-C Cable","text":"<p>For basic use and conifguration of the LTE Stick using AT commands or u-blox's m-center software you'll need USB-C cable to connect the dev board to your computer:</p> <ul> <li> <p> <p> </p> <p> USB 3.1 Cable A to C - 3 Foot CAB-14743 </p> <li> <p> <p> </p> <p> Reversible USB A to C Cable - 2m CAB-15424 </p>"},{"location":"print_view/#lte-antenna","title":"LTE Antenna","text":"<p>The LTE Stick has two SMA connectors for the Primary and Secondary antenna signals on the LARA-R6. The LARA-R6 only requires the Primary antenna for basic functionality but u-blox recommends connecting the Secondary antenna for best signal quality. We recommend using an antenna like the one below:</p> <ul> <li> <p> <p> </p> <p> LTE Hinged External Antenna - 698MHz-2.7GHz, SMA Male CEL-16432 </p>"},{"location":"print_view/#sim-card","title":"SIM Card","text":"<p>Finally, the LTE Stick requires a nano SIM card for cellular network connectivity. As mentioned above, the LTE Stick uses the LARA-R6401 module and supports only North American LTE networks and works with the AT&amp;T, Verizon, T-Mobile, and FirstNet cellular networks though make sure to check with your selected network provider for compatibility with the LARA-R6 before purchasing. The Hologram SIM card listed below works with the LARa-R6 for data and receiving SMS but not voice or sending SMS:</p> <ul> <li> <p> <p> </p> <p> Hologram SIM Card CEL-17117 </p>"},{"location":"print_view/#optional-materials","title":"Optional Materials","text":"<p>Using the LTE Stick with the SparkFun u-blox Cellular Arduino Library requires a connection to a microcontroller/development board. Below are a few options that will work with the LTE Stick out of the box.</p>"},{"location":"print_view/#development-boards","title":"Development Boards","text":"Logic Levels <p>The LTE Stick operates at 3.3V logic so make sure your chosen development board operates at the same logic level or use a level shifter.</p> <ul> <li> <p> <p> </p> <p> SparkFun Thing Plus - ESP32 WROOM (USB-C) DEV-20168 </p> <li> <p> <p> </p> <p> SparkFun IoT RedBoard - ESP32 Development Board DEV-19177 </p> <li> <p> <p> </p> <p> SparkFun Thing Plus - Artemis DEV-18158 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Pocket Development Board - ESP32-C6 DEV-22925 </p> <li> <p> <p> </p> <p> SparkFun ESP32 Qwiic Pro Mini DEV-23386 </p> <li> <p> <p> </p> <p> SparkFun RedBoard Artemis DEV-15444  </p> <p>If you prefer to use the LTE Stick with a development board or simply prefer a soldered connection or want to modify the solder jumpers on these Qwiic breakouts you you may need some of the products listed below:</p>"},{"location":"print_view/#soldering-tools-accessories","title":"Soldering Tools &amp; Accessories","text":"<ul> <li> <p> <p> </p> <p> Break Away Headers - Straight PRT-00116 </p> <li> <p> <p> </p> <p> SparkFun Beginner Tool Kit TOL-14681 </p> <li> <p> <p> </p> <p>Weller WLSK3012A Soldering Station TOL-22133 </p> <li> <p> <p> </p> <p>Solder Lead Free - 100-gram Spool TOL-09325 </p> <li> <p> <p> </p> <p> Hobby Knife TOL-09200 </p> <li> <p> <p> </p> <p>Chip Quik No-Clean Flux Pen - 10mL CAB-14579 </p>"},{"location":"print_view/#suggested-reading","title":"Suggested Reading","text":"<p>Before getting started with this Hookup Guide, you may want to read through the tutorials below if you are not familiar with the concepts covered in them or want a refresher. If you are using either of the Qwiic Shields linked above, we recommend reading through their respective Hookup Guides before continuing with this tutorial:</p> <ul> <li> <p> Serial Communication </p> </li> <li> <p> Logic Levels </p> </li> <li> <p> Installing Arduino IDE </p> </li> <li> <p> Installing an Arduino Library </p> </li> <li> <p> Serial Terminal Basics </p> </li> <li> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul>"},{"location":"print_view/#hardware-overview","title":"Hardware Overview","text":""},{"location":"print_view/#lara-r6-lte-module","title":"LARA-R6 LTE Module","text":"<p>The heart of the LTE Stick is the LARA-R6 LTE Cat 1 module from u-blox. The LARA-R6401 supports data, SMS, and voice over LTE bands and works with most major North American carriers (Verizon, TMobile, AT&amp;T, etc.). </p> <p></p> <p>The LARA-R6 has the following interfaces: USB, 2x UART, I<sup>2</sup>S, I<sup>2</sup>C, SIM interface, and nine GPIO pins. It also has a host of features including device security through Root of Trust (RoT) with secure boot and update, firmware updates both over the air (uFOTA) and through AT commands, dynamic antenna tuning, jamming detection, and much more. For a complete overview of these features and other information on the LARA-R6401, refer to the datasheet. The R6401 supports LTE FDD bands from 600 MHz to 1900 MHz (2, 4, 5, 12, 13, 14, 66, and 71).</p>"},{"location":"print_view/#pinout","title":"Pinout","text":"<p>The board breaks out the LARA-R6's UART and I<sup>2</sup>S interfaces as well as the Power On, Reset and voltage pins to a pair of 0.1\"-spaced PTH (plated through-hole) headers.</p> <p></p> <p>The list below outlines the functionality of pins broken out on the LTE Stick:</p> <ul> <li>PWR_On - LARA-R6 power control pin</li> <li>Reset - LARA-R6 reset pin</li> <li>RXD - UART data out</li> <li>TXD - UART data in</li> <li>CTS - UART clear to send</li> <li>RTS - UART ready to send</li> <li>RXA - I<sup>2</sup>S receive data</li> <li>CLK - I<sup>2</sup>S clock</li> <li>TXA - I<sup>2</sup>S transmit data</li> <li> <p>WA - I<sup>2</sup>S word alignment</p> </li> <li> <p>VIN - 5V </p> </li> <li>3.3V - Regulated 3.3V</li> <li>1.8 - Regulated 1.8V  </li> </ul>"},{"location":"print_view/#test-points","title":"Test Points","text":"<p>Warning</p> <p>All three of these clusters have test point connections for 1.8V and GND and connect directly to the associated pins on the LARA-R6. These pins are not level-shifted and run at 1.8V logic. Take care when interacting with these pins to avoid damaging the signals they connect to.</p> <p>The LTE Stick also has several other interfaces broken out to test points for advanced users to solder to. These test points are small copper pads grouped into three clusters labeled: I2C, GPIO, and UART2. They do not have individual pin labels so refer to the board files (ZIP) to identify the pin locations.</p> <p></p> <p>The I2C cluster contains the LARA's I<sup>2</sup>C bus pins (SDA/SCL) as well as GPIO4. The GPIO cluster contains GPIO1, GPIO2, GPIO3, and GPIO6. All GPIO pins can act as a generic GPIO signal but some have alternate functions outlined in section 2.8 of the LARA-R6 datasheet. </p> <p>The UART2 cluster contains the LARA's UART2 pins: TX2, RX2, CTS2, and RTS2. This interface is disabled by default and can be activated by the dedicated AT command. Refer to section 18.12 of the AT commands manual and section 1.9.1.2 of the integration manual for complete information on using these pins. Users also should open the DTR solder jumper to use this pin for TX2 (refer to the Solder Jumpers section for more information on the DTR jumper).</p>"},{"location":"print_view/#connectorsconnections","title":"Connectors/Connections","text":"<p>Let's take a closer look at the connectors on the LTE Stick.</p>"},{"location":"print_view/#power","title":"Power","text":"<p>The LTE Stick uses a USB-C connector for primary power input and serial communication. The board also has dedicated PTHs for the three voltage inputs on the board: 5V(VIN), 3.3V, and 1.8V along with PTHs for Ground.</p> <p></p>"},{"location":"print_view/#antenna-connections","title":"Antenna Connections","text":"<p>The LARA-R6 has two antenna connections; Primary (ANT1) and Secondary (ANT2). The Primary antenna functions as the main antenna interface and supports TX/RX transmissions. The Secondary antenna communicates over RX only for the LTE / 3G RX diversity configuration. </p> <p></p>"},{"location":"print_view/#nano-sim-card-slot","title":"Nano SIM Card Slot","text":"<p>The LTE Stick has an on-board Nano SIM card slot. The LTE Stick uses the LARA-R6401 which works with most major North American carriers (Verizon, TMobile, AT&amp;T, etc.).   </p> <p></p>"},{"location":"print_view/#buttons","title":"Buttons","text":"<p>The board has two buttons labeled ON and RST. The ON button connects to the LARA-R6 PWR_On pin which turns the module on and off. Tap it once to turn the module on and hold it down for three seconds to turn it off. The RST button connects to the LARA-R6's reset line and resets the module when pressed.</p> <p></p>"},{"location":"print_view/#leds","title":"LEDs","text":"<p>The LTE Stick has a pair of red LEDs labeled PWR and ON. The PWR LED indicates whenever the 3.3V rail is powered through USB or the VIN/3.3V PTH pins. The ON LED indicates when the LARA-R6 is powered up. </p> <p></p>"},{"location":"print_view/#solder-jumpers","title":"Solder Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction! <p>      How to Work with Jumper Pads and PCB Traces </p></p> <p>The LTE Stick has four solder jumpers labeled PWR_LED, ON_LED, SHLD, and DTR. </p> <p></p> <p>The PWR_LED and ON_LED jumpers complete the power circuits for their associated LEDs (PWR and ON). They are CLOSED by default. Open them to disable these LEDs to help conserve power. The SHLD jumper connects the USB-C connector's shield pin to ground. Open it to isolate the shield pin. The DTR jumper is CLOSED by default and pulls the LARA-R6 DTR pin to ground (LOW) to function as UART data terminal ready. Open the jumper to use the DTR pin for its secondary use as TX2 when using the UART2 test point cluster.</p>"},{"location":"print_view/#board-dimensions","title":"Board Dimensions","text":"<p>The board measures 3.25\" x 1.00\" (82.55mm x 25.40mm) with four mounting holes that fit a 4-40 screw.</p> <p></p> <p>Board dimensions for the SparkFun LTE Stick, in inches.</p> Need more measurements? <p>For more information about the board's dimensions, users can download the Eagle files for the board. These files can be opened in Eagle and additional measurements can be made with the dimensions tool.</p>  Eagle - Free Download! <p>Eagle is a CAD program for electronics that is free to use for hobbyists and students. However, it does require an account registration to utilize the software.</p> <p> Download fromAutodesk primary logo </p>  Dimensions Tool <p>This video from Autodesk demonstrates how to utilize the dimensions tool in Eagle, to include additional measurements:</p> <p> </p>"},{"location":"print_view/#hardware-assembly","title":"Hardware Assembly","text":""},{"location":"print_view/#basic-assembly","title":"Basic Assembly","text":"<p>The fastest way to get up and running with the LTE Stick is by connecting it to a computer through the USB-C connector and then using u-blox's mcenter software. </p> <p></p>"},{"location":"print_view/#soldered-assembly","title":"Soldered Assembly","text":"New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide. <p>      How to Solder: Through-Hole Soldering </p></p> <p>We specifically designed this board to fit on a breadboard with headers soldered to it for easy prototype circuit building with the LARA-R6. This assembly is strongly recommended for those who wish to use the LTE Stick with the SparkFun u-blox Cellular Library to make connections between the LTE Stick, microcontroller, and other hardware (where necessary).</p> <p>Note</p> <p>This assembly assumes the use of the SparkFun Thing Plus - ESP32 WROOM (USB-C) to make serial connections between the boards. If you are using a different microcontroller, adjust the serial connections between the two boards to the appropriate pins.</p> <p>Start by soldering male headers to both sets of PTH pins on either side of the board. Next, connect the TXD and RXD pins on the LTE Stick to the Serial1 pins on the Thing Plus - ESP32 (USB-C). Finally, connect VUSB on the Thing Plus to VIN on the LTE Stick and connect the ground pins on both boards to each other. With everything wired up, your completed assembly should resemble the photo below:</p> <p></p> Having trouble seeing the connections in detail? Click on the image for a larger view."},{"location":"print_view/#u-blox-cellular-arduino-library","title":"u-blox Cellular Arduino Library","text":""},{"location":"print_view/#software-setup","title":"Software Setup","text":""},{"location":"print_view/#arduino-ide","title":"Arduino IDE","text":"<p>Most users may already be familiar with the Arduino IDE and its use. However, for those of you who have never heard the name Arduino before, feel free to check out the Arduino website. To get started with using the Arduino IDE, check out our tutorials below:</p> <ul> <li> <p> <p>Installing the Arduino IDE</p> <li> <p> <p>Installing an Arduino Library</p> <li> <p> <p>Installing Board Definitions in the Arduino IDE</p>"},{"location":"print_view/#sparkfun-u-blox-cellular-arduino-library","title":"SparkFun u-blox Cellular Arduino Library","text":"<p>The SparkFun u-blox Cellular Arduino Library is a generic AT command-set library that works with multiple u-blox cellular modules that share the same AT Command Set. This includes the LARA-R6 on this board as well as the SARA-R5 and others. Most of the examples are generic and work with all modules but some require selecting a specific module to function properly.</p> <p>Download the library through the Arduino Library Manager tool by searching for \"SparkFun u-blox Cellular\" and download the latest version. Users who prefer to install it manually can download it from the GitHub repository or by clicking the button below:</p> <p> SparkFun u-blox Cellular Arduino Library (ZIP)) </p> <p>With the library installed, let's move on to taking a closer look at a few of the examples included in it.</p>"},{"location":"print_view/#arduino-examples","title":"Arduino Examples","text":""},{"location":"print_view/#icon-simplearduino","title":"icon: simple/arduino","text":"<p>The SparkFun u-blox Cellular Arduino Library includes a large set of examples to do all sorts of things with supported u-blox cellular modules. Some examples work with all modules, others are limited to specific ones. All examples assume a serial connection between a microcontroller and the LTE Stick (or other supported cellular module) as demonstrated in the Hardware Assembly section. These examples build upon each other so we recommend following them in sequential order to get everything set up and working properly.</p> <p>LARA-R6 Power</p> <p>Make sure to power on the module using the \"ON\" button </p> <p>If you have not used m-center or AT commands to configure the network information and register the network operator for your device before using this library, you may need to go through Example 2 - Network Info and Example 3 - Register Operator to get the LARA-R6 registered and configured properly on your network. Otherwise, feel free to skip ahead to the Ping and other more complex examples.</p>"},{"location":"print_view/#example-1-device-identification","title":"Example 1 - Device Identification","text":"<p>The first example  performs the basic AT commands to return the device information of a connected module:</p> <ul> <li>Manufacturer ID</li> <li>Model</li> <li>Firmware Version</li> <li>Serial Number</li> <li>IMEI ID</li> <li>IMSI ID</li> <li>SIM CCID</li> <li>Subscriber Number (from the SIM)</li> <li>Capabilities</li> <li>SIM state</li> </ul> <p>Open the example by navigating to File &lt; Examples &lt; SparkFun u-blox Cellular Arduino Library &lt; Example 1 - Device Identification or copy the code below into a blank sketch.</p> Example 1 - Device Information <pre><code>#include \"SparkFun_u-blox_Cellular_Arduino_Library.h\"\n\n// Uncomment the line below that you need for Serial on your platform\n#define mySerial Serial1\n// SoftwareSerial mySerial(16, 17);\n\n// Uncomment the module you're using. If your module is not listed below, then\n// it's not supported for this example\nSparkFun_ublox_Cellular myModule; // This example works with all modules, so the base class can be used\n// SparkFun_ublox_SARA_R5 myModule; // Base SARA-R5 class\n// SparkFun_ublox_SARA_R500S myModule;\n// SparkFun_ublox_SARA_R500S_01B myModule;\n// SparkFun_ublox_SARA_R500S_61B myModule;\n// SparkFun_ublox_SARA_R510M8S_61B myModule;\n// SparkFun_ublox_SARA_R510S myModule;\n// SparkFun_ublox_LARA_R6 myModule; // Base LARA-R6 class\n// SparkFun_ublox_LARA_R6001 myModule;\n// SparkFun_ublox_LARA_R6001D myModule;\n// SparkFun_ublox_LARA_R6401 myModule;\n// SparkFun_ublox_LARA_R6401D myModule;\n// SparkFun_ublox_LARA_R6801_00B myModule;\n// SparkFun_ublox_LARA_R6801D myModule;\n\n// Map SIM states to more readable strings\nString simStateString[] = {\n    \"Not present\",     // 0\n    \"PIN needed\",      // 1\n    \"PIN blocked\",     // 2\n    \"PUK blocked\",     // 3\n    \"Not operational\", // 4\n    \"Restricted\",      // 5\n    \"Operational\"      // 6\n};\n\n// processSIMstate is provided to the u-blox cellular library via a\n// callback setter -- setSIMstateReadCallback. (See setup())\nvoid processSIMstate(UBX_CELL_sim_states_t state)\n{\n    Serial.println();\n    Serial.print(F(\"SIM state:           \"));\n    Serial.print(String(state));\n    Serial.println();\n}\n\nvoid setup()\n{\n    Serial.begin(115200); // Start the serial console\n\n    // Wait for user to press key to begin\n    Serial.println(F(\"u-blox Cellular Example 1 - Device Identification\"));\n    Serial.println(F(\"Press any key to begin\"));\n\n    while (!Serial.available()) // Wait for the user to press a key (send any serial character)\n        ;\n    while (Serial.available()) // Empty the serial RX buffer\n        Serial.read();\n\n    Serial.println(F(\"Beginning...\"));\n\n    // myModule.enableDebugging(); // Uncomment this line to enable helpful debug messages on Serial\n\n    // For the MicroMod Asset Tracker, we need to invert the power pin so it pulls high instead of low\n    // Uncomment the next line if required\n    // myModule.invertPowerPin(true);\n\n    // Initialize the module\n    if (myModule.begin(mySerial, UBX_CELL_DEFAULT_BAUD_RATE))\n    {\n        Serial.println(F(\"Module connected!\"));\n    }\n    else\n    {\n        Serial.println(F(\"Unable to communicate with the module.\"));\n        Serial.println(F(\"Manually power-on (hold the module's On button for 3 seconds) and try again.\"));\n        while (1)\n            ; // Loop forever on fail\n    }\n    Serial.println();\n\n    Serial.println(\"Manufacturer ID:     \" + String(myModule.getManufacturerID()));\n    Serial.println(\"Model ID:            \" + String(myModule.getModelID()));\n    Serial.println(\"Firmware Version:    \" + String(myModule.getFirmwareVersion()));\n    Serial.println(\"Product Serial No.:  \" + String(myModule.getSerialNo()));\n    Serial.println(\"IMEI:                \" + String(myModule.getIMEI()));\n    Serial.println(\"IMSI:                \" + String(myModule.getIMSI()));\n    Serial.println(\"SIM CCID:            \" + String(myModule.getCCID()));\n    Serial.println(\"Subscriber No.:      \" + String(myModule.getSubscriberNo()));\n    Serial.println(\"Capabilities:        \" + String(myModule.getCapabilities()));\n\n    // Set a callback to return the SIM state once requested\n    myModule.setSIMstateReportCallback(&amp;processSIMstate);\n    // Now enable SIM state reporting for states 0 to 6 (by setting the reporting mode LSb)\n    if (myModule.setSIMstateReportingMode(1) == UBX_CELL_SUCCESS)\n        Serial.println(\"SIM state reports requested...\");\n    // You can disable the SIM staus reports again by calling assetTracker.setSIMstateReportingMode(0)\n}\n\nvoid loop()\n{\n    myModule.poll(); // Keep processing data from the module so we can extract the SIM status\n}\n</code></pre> <p>Serial Port Selection</p> <p>This and all following examples default to use <code>Serial1</code> for serial communication between the LTE Stick and microcontroller. If your selected microcontroller does not have this serial port, uncomment the following line and, if necessary, adjust the pins set for software serial depending on the software serial library limitations.</p> <pre><code>    // SoftwareSerial mySerial(16, 17);\n</code></pre> <p>Select your board (SparkFun Thing Plus ESP32 if you're following along with this tutorial verbatim) and Port and click the \"Upload\" button. When the code finishes compiling and uploading, open the serial monitor with the baud set to 115200. The code waits on a user prompt to begin so press any key when prompted in the serial monitor and you should see the device information and SIM status print out.</p>"},{"location":"print_view/#example-2-network-info","title":"Example 2 - Network Info","text":"<p>The second example verifies the LARA-R6 is receiving an LTE signal on a selected network and prints out the network information and IDs. The code creates the LARA-R6 object and assigns a network operator value.</p> Example 2 -Network Info <pre><code>#include \"SparkFun_u-blox_Cellular_Arduino_Library.h\"\n\n// Uncomment the line below that you need for Serial on your platform\n#define mySerial Serial1\n// SoftwareSerial mySerial(16, 17);\n\n// Uncomment the module you're using. If your module is not listed below, then\n// it's not supported for this example\nSparkFun_ublox_Cellular myModule; // This example works with all modules, so the base class can be used\n// SparkFun_ublox_SARA_R5 myModule; // Base SARA-R5 class\n// SparkFun_ublox_SARA_R500S myModule;\n// SparkFun_ublox_SARA_R500S_01B myModule;\n// SparkFun_ublox_SARA_R500S_61B myModule;\n// SparkFun_ublox_SARA_R510M8S_61B myModule;\n// SparkFun_ublox_SARA_R510S myModule;\n// SparkFun_ublox_LARA_R6 myModule; // Base LARA-R6 class\n// SparkFun_ublox_LARA_R6001 myModule;\n// SparkFun_ublox_LARA_R6001D myModule;\n// SparkFun_ublox_LARA_R6401 myModule;\n// SparkFun_ublox_LARA_R6401D myModule;\n// SparkFun_ublox_LARA_R6801_00B myModule;\n// SparkFun_ublox_LARA_R6801D myModule;\n\n// Map registration status messages to more readable strings\nString registrationString[] = {\n    \"Not registered\",                        // 0\n    \"Registered, home\",                      // 1\n    \"Searching for operator\",                // 2\n    \"Registration denied\",                   // 3\n    \"Registration unknown\",                  // 4\n    \"Registered, roaming\",                   // 5\n    \"Registered, home (SMS only)\",           // 6\n    \"Registered, roaming (SMS only)\",        // 7\n    \"Registered, emergency service only\",    // 8\n    \"Registered, home, CSFB not preferred\",  // 9\n    \"Registered, roaming, CSFB not prefered\" // 10\n};\n\n// If you are based in Europe, you will (probably) need to select MNO_STD_EUROPE\nconst mobile_network_operator_t MOBILE_NETWORK_OPERATOR = MNO_GLOBAL;\n\nvoid setup()\n{\n    Serial.begin(115200); // Start the serial console\n\n    // Wait for user to press key to begin\n    Serial.println(F(\"u-blox Cellular Example 2 - Network Info\"));\n    Serial.println(F(\"Press any key to begin\"));\n\n    while (!Serial.available()) // Wait for the user to press a key (send any serial character)\n        ;\n    while (Serial.available()) // Empty the serial RX buffer\n        Serial.read();\n\n    Serial.println(F(\"Beginning...\"));\n\n    // myModule.enableDebugging(); // Uncomment this line to enable helpful debug messages on Serial\n\n    // For the MicroMod Asset Tracker, we need to invert the power pin so it pulls high instead of low\n    // Uncomment the next line if required\n    // myModule.invertPowerPin(true);\n\n    // Initialize the module\n    if (myModule.begin(mySerial, UBX_CELL_DEFAULT_BAUD_RATE))\n    {\n        Serial.println(F(\"Module connected!\"));\n    }\n    else\n    {\n        Serial.println(F(\"Unable to communicate with the module.\"));\n        Serial.println(F(\"Manually power-on (hold the module's On button for 3 seconds) and try again.\"));\n        while (1)\n            ; // Loop forever on fail\n    }\n    Serial.println();\n\n    if (!myModule.setNetworkProfile(MOBILE_NETWORK_OPERATOR))\n    {\n        Serial.println(F(\"Error setting network. Try cycling the power.\"));\n        while (1)\n            ;\n    }\n\n    Serial.println(F(\"Network profile set. Ready to go!\"));\n\n    // RSSI: Received signal strength:\n    Serial.println(\"RSSI: \" + String(myModule.rssi()));\n    // Registration Status\n    int regStatus = myModule.registration();\n    if ((regStatus &gt;= 0) &amp;&amp; (regStatus &lt;= 10))\n    {\n        Serial.println(\"Network registration: \" + registrationString[regStatus]);\n    }\n\n    // Print the Context IDs, Access Point Names and IP Addresses\n    Serial.println(F(\"Available PDP (Packet Data Protocol) APNs (Access Point Names) and IP Addresses:\"));\n    Serial.println(F(\"Context ID:\\tAPN Name:\\tIP Address:\"));\n    for (int cid = 0; cid &lt; UBX_CELL_NUM_PDP_CONTEXT_IDENTIFIERS; cid++)\n    {\n        String apn = \"\";\n        IPAddress ip(0, 0, 0, 0);\n        myModule.getAPN(cid, &amp;apn, &amp;ip);\n        if (apn.length() &gt; 0)\n        {\n            Serial.print(cid);\n            Serial.print(F(\"\\t\\t\"));\n            Serial.print(apn);\n            Serial.print(F(\"\\t\"));\n            Serial.println(ip);\n        }\n    }\n\n    Serial.println();\n\n    if (regStatus &gt; 0)\n    {\n        Serial.println(F(\"All set. Go to the next example!\"));\n    }\n}\n\nvoid loop()\n{\n    // Do nothing. Now that we're registered move on to the next example.\n}\n</code></pre> <p>After uploading the code, open a terminal window with the baud set to 115200 and enter any key to start the example. After initializing everything needed, the code attempts to set the Network Profile to the Mobile Network Operator entered. If successful, the code prints out the RSSI (Received Signal Strength), Network Registration Status and Context IDs, Access Point Names and IP Addresses.</p>"},{"location":"print_view/#example-3-register-operator","title":"Example 3 - Register Operator","text":"<p>Example 4 checks to see if the LARA-R6 is connected to a network and lets you register on a different network if available and if the SIM supports this. This example can also be used to list all the LTE operators the LARA-R6 can detect. Note, you can only connect to networks supported by your SIM card. Refer to your SIM card manufacturer's documentation for supported networks.</p> Example 3 - Register Operator <pre><code>#include \"SparkFun_u-blox_Cellular_Arduino_Library.h\"\n\n// Uncomment the line below that you need for Serial on your platform\n#define mySerial Serial1\n// SoftwareSerial mySerial(16, 17);\n\n// Uncomment the module you're using. If your module is not listed below, then\n// it's not supported for this example\nSparkFun_ublox_Cellular myModule; // This example works with all modules, so the base class can be used\n// SparkFun_ublox_SARA_R5 myModule; // Base SARA-R5 class\n// SparkFun_ublox_SARA_R500S myModule;\n// SparkFun_ublox_SARA_R500S_01B myModule;\n// SparkFun_ublox_SARA_R500S_61B myModule;\n// SparkFun_ublox_SARA_R510M8S_61B myModule;\n// SparkFun_ublox_SARA_R510S myModule;\n// SparkFun_ublox_LARA_R6 myModule; // Base LARA-R6 class\n// SparkFun_ublox_LARA_R6001 myModule;\n// SparkFun_ublox_LARA_R6001D myModule;\n// SparkFun_ublox_LARA_R6401 myModule;\n// SparkFun_ublox_LARA_R6401D myModule;\n// SparkFun_ublox_LARA_R6801_00B myModule;\n// SparkFun_ublox_LARA_R6801D myModule;\n\n// Map registration status messages to more readable strings\nString registrationString[] = {\n    \"Not registered\",                        // 0\n    \"Registered, home\",                      // 1\n    \"Searching for operator\",                // 2\n    \"Registration denied\",                   // 3\n    \"Registration unknown\",                  // 4\n    \"Registered, roaming\",                   // 5\n    \"Registered, home (SMS only)\",           // 6\n    \"Registered, roaming (SMS only)\",        // 7\n    \"Registered, emergency service only\",    // 8\n    \"Registered, home, CSFB not preferred\",  // 9\n    \"Registered, roaming, CSFB not prefered\" // 10\n};\n\n// If you are based in Europe, you will (probably) need to select MNO_STD_EUROPE\nconst mobile_network_operator_t MOBILE_NETWORK_OPERATOR = MNO_GLOBAL;\n\nconst String MOBILE_NETWORK_STRINGS[] = {\"default (Undefined/Regulatory)\",\n                                         \"SIM ICCID\",\n                                         \"AT&amp;T\",\n                                         \"Verizon\",\n                                         \"Telstra\",\n                                         \"T-Mobile US\",\n                                         \"China Telecom\",\n                                         \"Sprint\",\n                                         \"Vodafone\",\n                                         \"NTT DoCoMo\",\n                                         \"Telus\",\n                                         \"SoftBank\",\n                                         \"Deutsche Telekom\",\n                                         \"US Cellular\",\n                                         \"SKT\",\n                                         \"global (factory default)\",\n                                         \"standard Europe\",\n                                         \"standard Europe No-ePCO\",\n                                         \"NOT RECOGNIZED\"};\n\n// Convert the operator number into an index for MOBILE_NETWORK_STRINGS\nint convertOperatorNumber(mobile_network_operator_t mno)\n{\n    switch (mno)\n    {\n    case 0:\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n    case 6:\n        return ((int)mno);\n    case 8:\n        return 7;\n    case 19:\n        return 8;\n    case 20:\n        return 9;\n    case 21:\n        return 10;\n    case 28:\n        return 11;\n    case 31:\n        return 12;\n    case 32:\n        return 13;\n    case 39:\n        return 14;\n    case 90:\n        return 15;\n    case 100:\n        return 16;\n    case 101:\n        return 17;\n    default: // NOT RECOGNIZED\n        return 18;\n    }\n}\n\n// This defines the size of the ops struct array. To narrow the operator\n// list, set MOBILE_NETWORK_OPERATOR to AT&amp;T, Verizon etc. instead\n// of MNO_SW_DEFAULT.\n#define MAX_OPERATORS 10\n\n// Uncomment this line if you want to be able to communicate directly with the module in the main loop\n// #define DEBUG_PASSTHROUGH_ENABLED\n\nvoid setup()\n{\n    int opsAvailable;\n    struct operator_stats ops[MAX_OPERATORS];\n    String currentOperator = \"\";\n    bool newConnection = true;\n\n    Serial.begin(115200); // Start the serial console\n\n    // Wait for user to press key to begin\n    Serial.println(F(\"u-blox Cellular Example 3 - Register Operator\"));\n    Serial.println(F(\"Press any key to begin\"));\n\n    while (!Serial.available()) // Wait for the user to press a key (send any serial character)\n        ;\n    while (Serial.available()) // Empty the serial RX buffer\n        Serial.read();\n\n    Serial.println(F(\"Beginning...\"));\n\n    // myModule.enableDebugging(); // Uncomment this line to enable helpful debug messages on Serial\n\n    // For the MicroMod Asset Tracker, we need to invert the power pin so it pulls high instead of low\n    // Uncomment the next line if required\n    // myModule.invertPowerPin(true);\n\n    // Initialize the module\n    if (myModule.begin(mySerial, UBX_CELL_DEFAULT_BAUD_RATE))\n    {\n        Serial.println(F(\"Module connected!\"));\n    }\n    else\n    {\n        Serial.println(F(\"Unable to communicate with the module.\"));\n        Serial.println(F(\"Manually power-on (hold the module's On button for 3 seconds) and try again.\"));\n        while (1)\n            ; // Loop forever on fail\n    }\n    Serial.println();\n\n    // First check to see if we're already connected to an operator:\n    if (myModule.getOperator(&amp;currentOperator) == UBX_CELL_SUCCESS)\n    {\n        Serial.print(F(\"Already connected to: \"));\n        Serial.println(currentOperator);\n        // If already connected provide the option to type y to connect to new operator\n        Serial.println(F(\"Press y to connect to a new operator, or any other key to continue.\\r\\n\"));\n        while (!Serial.available())\n            ;\n        if (Serial.read() != 'y')\n        {\n            newConnection = false;\n        }\n        else\n        {\n            myModule.deregisterOperator(); // Deregister from the current operator so we can connect to a new one\n        }\n        while (Serial.available())\n            Serial.read();\n    }\n\n    if (newConnection)\n    {\n        // Set MNO to either Verizon, T-Mobile, AT&amp;T, Telstra, etc.\n        // This will narrow the operator options during our scan later\n        Serial.println(F(\"Setting mobile-network operator\"));\n        if (myModule.setNetworkProfile(MOBILE_NETWORK_OPERATOR))\n        {\n            Serial.print(F(\"Set mobile network operator to \"));\n            Serial.println(MOBILE_NETWORK_STRINGS[convertOperatorNumber(MOBILE_NETWORK_OPERATOR)] + \"\\r\\n\");\n        }\n        else\n        {\n            Serial.println(F(\"Error setting MNO. Try cycling the power. Freezing...\"));\n            while (1)\n                ;\n        }\n\n        // Wait for user to press button before initiating network scan.\n        Serial.println(F(\"Press any key scan for networks..\"));\n        serialWait();\n\n        Serial.println(F(\"Scanning for networks...this may take up to 3 minutes\\r\\n\"));\n        // myModule.getOperators takes in a operator_stats struct pointer and max number of\n        // structs to scan for, then fills up those objects with operator names and numbers\n        opsAvailable = myModule.getOperators(ops, MAX_OPERATORS); // This will block for up to 3 minutes\n\n        if (opsAvailable &gt; 0)\n        {\n            // Pretty-print operators we found:\n            Serial.println(\"Found \" + String(opsAvailable) + \" operators:\");\n            printOperators(ops, opsAvailable);\n            Serial.println(String(opsAvailable + 1) + \": use automatic selection\");\n            Serial.println();\n\n            // Wait until the user presses a key to initiate an operator connection\n            Serial.println(\"Press 1-\" + String(opsAvailable + 1) + \" to select an operator.\");\n            char c = 0;\n            bool selected = false;\n            while (!selected)\n            {\n                while (!Serial.available())\n                    ;\n                c = Serial.read();\n                int selection = c - '0';\n                if ((selection &gt;= 1) &amp;&amp; (selection &lt;= (opsAvailable + 1)))\n                {\n                    selected = true;\n                    Serial.println(\"Connecting to option \" + String(selection));\n                    if (selection == (opsAvailable + 1))\n                    {\n                        if (myModule.automaticOperatorSelection() == UBX_CELL_SUCCESS)\n                        {\n                            Serial.println(\"Automatic operator selection: successful\\r\\n\");\n                        }\n                        else\n                        {\n                            Serial.println(\n                                F(\"Automatic operator selection: error. Reset and try again, or try another network.\"));\n                        }\n                    }\n                    else\n                    {\n                        if (myModule.registerOperator(ops[selection - 1]) == UBX_CELL_SUCCESS)\n                        {\n                            Serial.println(\"Network \" + ops[selection - 1].longOp + \" registered\\r\\n\");\n                        }\n                        else\n                        {\n                            Serial.println(\n                                F(\"Error connecting to operator. Reset and try again, or try another network.\"));\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            Serial.println(F(\"Did not find an operator. Double-check SIM and antenna, reset and try again, or try \"\n                             \"another network.\"));\n            while (1)\n                ;\n        }\n    }\n\n    // At the very end print connection information\n    printInfo();\n}\n\nvoid loop()\n{\n    // Loop provides a debugging interface.\n    if (mySerial.available())\n    {\n        Serial.write((char)mySerial.read());\n    }\n#ifdef DEBUG_PASSTHROUGH_ENABLED\n    if (Serial.available())\n    {\n        mySerial.write((char)Serial.read());\n    }\n#endif\n}\n\nvoid printInfo(void)\n{\n    String currentApn = \"\";\n    IPAddress ip(0, 0, 0, 0);\n    String currentOperator = \"\";\n\n    Serial.println(F(\"Connection info:\"));\n    Serial.println(F(\"Context ID:\\tAPN Name:\\tIP Address:\"));\n    for (int cid = 0; cid &lt; UBX_CELL_NUM_PDP_CONTEXT_IDENTIFIERS; cid++)\n    {\n        String apn = \"\";\n        IPAddress ip(0, 0, 0, 0);\n        myModule.getAPN(cid, &amp;apn, &amp;ip);\n        if (apn.length() &gt; 0)\n        {\n            Serial.print(cid);\n            Serial.print(F(\"\\t\\t\"));\n            Serial.print(apn);\n            Serial.print(F(\"\\t\"));\n            Serial.println(ip);\n        }\n    }\n\n    // Operator name or number\n    if (myModule.getOperator(&amp;currentOperator) == UBX_CELL_SUCCESS)\n    {\n        Serial.print(F(\"Operator: \"));\n        Serial.println(currentOperator);\n    }\n\n    // Received signal strength\n    Serial.println(\"RSSI: \" + String(myModule.rssi()));\n    Serial.println();\n}\n\nvoid printOperators(struct operator_stats *ops, int operatorsAvailable)\n{\n    for (int i = 0; i &lt; operatorsAvailable; i++)\n    {\n        Serial.print(String(i + 1) + \": \");\n        Serial.print(ops[i].longOp + \" (\" + String(ops[i].numOp) + \") - \");\n        switch (ops[i].stat)\n        {\n        case 0:\n            Serial.print(F(\"UNKNOWN\"));\n            break;\n        case 1:\n            Serial.print(F(\"AVAILABLE\"));\n            break;\n        case 2:\n            Serial.print(F(\"CURRENT\"));\n            break;\n        case 3:\n            Serial.print(F(\"FORBIDDEN\"));\n            break;\n        }\n        switch (ops[i].act)\n        {\n        case 0:\n            Serial.print(F(\" - GSM\"));\n            break;\n        case 2:\n            Serial.print(F(\" - UTRAN\"));\n            break;\n        case 3:\n            Serial.print(F(\" - GSM/GPRS with EDGE\"));\n            break;\n        case 7:\n            Serial.print(F(\" - LTE\")); // SARA-R5 only supports LTE\n            break;\n        }\n        Serial.println();\n    }\n    Serial.println();\n}\n\nvoid serialWait()\n{\n    while (Serial.available())\n        Serial.read();\n    while (!Serial.available())\n        ;\n    delay(100);\n    while (Serial.available())\n        Serial.read();\n}\n</code></pre>"},{"location":"print_view/#example-5-ping","title":"Example 5 - Ping","text":"<p>The eighth example tests the LTE Stick's data connection by a standard server ping. Open a terminal window and follow the prompts then enter a server to ping. Any valid web address like www.google.com or www.sparkfun.com works. If the ping succeeds the code prints out the time to send and receive the ping in milliseconds.</p> Example 5 - Ping <pre><code>#include \"SparkFun_u-blox_Cellular_Arduino_Library.h\"\n\n// Uncomment the line below that you need for Serial on your platform\n#define mySerial Serial1\n// SoftwareSerial mySerial(16, 17);\n\n// Uncomment the module you're using. If your module is not listed below, then\n// it's not supported for this example\nSparkFun_ublox_Cellular myModule; // This example works with all modules, so the base class can be used\n// SparkFun_ublox_SARA_R5 myModule; // Base SARA-R5 class\n// SparkFun_ublox_SARA_R500S myModule;\n// SparkFun_ublox_SARA_R500S_01B myModule;\n// SparkFun_ublox_SARA_R500S_61B myModule;\n// SparkFun_ublox_SARA_R510M8S_61B myModule;\n// SparkFun_ublox_SARA_R510S myModule;\n// SparkFun_ublox_LARA_R6 myModule; // Base LARA-R6 class\n// SparkFun_ublox_LARA_R6001 myModule;\n// SparkFun_ublox_LARA_R6001D myModule;\n// SparkFun_ublox_LARA_R6401 myModule;\n// SparkFun_ublox_LARA_R6401D myModule;\n// SparkFun_ublox_LARA_R6801_00B myModule;\n// SparkFun_ublox_LARA_R6801D myModule;\n\nString pingMe = \"\"; // The name of the server we are going to ping\n\n// processPingResult is provided to the u-blox cellular library via a\n// callback setter -- setPingCallback. (See the end of setup())\nvoid processPingResult(int retry, int p_size, String remote_hostname, IPAddress ip, int ttl, long rtt)\n{\n    Serial.println();\n    Serial.print(F(\"Ping Result:  Retry #:\"));\n    Serial.print(retry);\n    Serial.print(F(\"  Ping Size (Bytes):\"));\n    Serial.print(p_size);\n    Serial.print(F(\"  Remote Host:\\\"\"));\n    Serial.print(remote_hostname);\n    Serial.print(F(\"\\\"  IP Address:\\\"\"));\n    Serial.print(String(ip[0]));\n    Serial.print(F(\".\"));\n    Serial.print(String(ip[1]));\n    Serial.print(F(\".\"));\n    Serial.print(String(ip[2]));\n    Serial.print(F(\".\"));\n    Serial.print(String(ip[3]));\n    Serial.print(F(\"\\\"  Time To Live (hops):\"));\n    Serial.print(ttl);\n    Serial.print(F(\"  Round Trip (ms):\"));\n    Serial.print(rtt);\n    Serial.println();\n}\n\nvoid setup()\n{\n    String currentOperator = \"\";\n\n    Serial.begin(115200); // Start the serial console\n\n    // Wait for user to press key to begin\n    Serial.println(F(\"u-blox Cellular Example 5 - Ping\"));\n    Serial.println(F(\"Press any key to begin\"));\n\n    while (!Serial.available()) // Wait for the user to press a key (send any serial character)\n        ;\n    while (Serial.available()) // Empty the serial RX buffer\n        Serial.read();\n\n    Serial.println(F(\"Beginning...\"));\n\n    // myModule.enableDebugging(); // Uncomment this line to enable helpful debug messages on Serial\n\n    // For the MicroMod Asset Tracker, we need to invert the power pin so it pulls high instead of low\n    // Uncomment the next line if required\n    // myModule.invertPowerPin(true);\n\n    // Initialize the module\n    if (myModule.begin(mySerial, UBX_CELL_DEFAULT_BAUD_RATE))\n    {\n        Serial.println(F(\"Module connected!\"));\n    }\n    else\n    {\n        Serial.println(F(\"Unable to communicate with the module.\"));\n        Serial.println(F(\"Manually power-on (hold the module's On button for 3 seconds) and try again.\"));\n        while (1)\n            ; // Loop forever on fail\n    }\n    Serial.println();\n\n    // First check to see if we're connected to an operator:\n    if (myModule.getOperator(&amp;currentOperator) == UBX_CELL_SUCCESS)\n    {\n        Serial.print(F(\"Connected to: \"));\n        Serial.println(currentOperator);\n    }\n    else\n    {\n        Serial.print(F(\"The module is not yet connected to an operator. Please use the previous examples to connect. \"\n                       \"Or wait and retry. Freezing...\"));\n        while (1)\n            ; // Do nothing more\n    }\n\n    Serial.println();\n    Serial.println(F(\"*** Set the Serial Monitor line ending to Newline ***\"));\n\n    Serial.println();\n    Serial.println(F(\"Enter the name of the server you want to ping (followed by LF / Newline): \"));\n    Serial.println(F(\"Example: \\\"www.google.com\\\"\"));\n\n    // Set a callback to process the Ping result\n    myModule.setPingCallback(&amp;processPingResult);\n}\n\nvoid loop()\n{\n    if (Serial.available())\n    {\n        char c = Serial.read();\n        if (c == '\\n')\n        {\n            // Newline received so let's do that ping!\n            Serial.println(\"Pinging \" + pingMe + \"...\");\n            myModule.ping(pingMe); // Use the default parameters\n\n            // Use custom parameters\n            // int retries = 4; // number of retries\n            // int p_size = 32; // packet size (bytes)\n            // unsigned long timeout = 5000; // timeout (ms)\n            // int ttl = 32; // Time To Live\n            // myModule.ping(pingMe, retries, p_size, timeout, ttl);\n\n            pingMe = \"\"; // Clear the server name for the next try\n        }\n        else\n        {\n            // Add serial characters to the server address\n            pingMe += c;\n        }\n    }\n\n    myModule.poll(); // Keep processing data from the module so we can catch the Ping result\n}\n</code></pre> <p>If the ping fails, try uncommenting this line that enables debugging over serial:</p> <pre><code>// myModule.enableDebugging(); // Uncomment this line to enable helpful debug messages on Serial\n</code></pre> <p>Upload the code again, retry the ping and look for any messages that include +UUPINGER:. Refer to the list of Ping error codes in Appendix A. 9 of the AT Command Reference to decipher the error code.</p>"},{"location":"print_view/#further-examples","title":"Further Examples","text":"<p>These examples perform the basic tests for making sure everything is working properly on the LTE Stick but the SparkFun u-blox Cellular Arduino Library includes many more examples to take full advantage of the LARA-R6's capabilities including audio examples for playing audio tones and phonecall control. The audio examples require external hardware including an audio codec and are beyond the scope of this tutorial.</p>"},{"location":"print_view/#troubleshooting-tips","title":"Troubleshooting Tips","text":""},{"location":"print_view/#resources","title":"Resources:","text":""},{"location":"print_view/#resources_1","title":"Resources","text":"<p>For more resources related to the LTE Stick - LARA-R6, check out the links listed here: </p> <p>LTE Stick Resources:</p> <ul> <li>Product Page</li> <li>Schematic</li> <li>Eagle Files </li> <li>Board Dimensions</li> <li>SparkFun u-blox Cellular Arduino Library</li> <li>Hardware GitHub Respository</li> </ul> <p>LARA-R6 Resources:</p> <ul> <li>Datasheet</li> <li>Integration Manual</li> <li>Audio App Note</li> <li>AT Command Set</li> <li>m-center Download</li> <li>m-center User Guide</li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>For more resources related to the LTE Stick - LARA-R6, check out the links listed here: </p> <p>LTE Stick Resources:</p> <ul> <li>Product Page</li> <li>Schematic</li> <li>Eagle Files </li> <li>Board Dimensions</li> <li>SparkFun u-blox Cellular Arduino Library</li> <li>Hardware GitHub Respository</li> </ul> <p>LARA-R6 Resources:</p> <ul> <li>Datasheet</li> <li>Integration Manual</li> <li>Audio App Note</li> <li>AT Command Set</li> <li>m-center Download</li> <li>m-center User Guide</li> </ul>"},{"location":"software_setup/","title":"Library Setup","text":""},{"location":"software_setup/#arduino-ide","title":"Arduino IDE","text":"<p>Most users may already be familiar with the Arduino IDE and its use. However, for those of you who have never heard the name Arduino before, feel free to check out the Arduino website. To get started with using the Arduino IDE, check out our tutorials below:</p> <ul> <li> <p> <p>Installing the Arduino IDE</p> <li> <p> <p>Installing an Arduino Library</p> <li> <p> <p>Installing Board Definitions in the Arduino IDE</p>"},{"location":"software_setup/#sparkfun-u-blox-cellular-arduino-library","title":"SparkFun u-blox Cellular Arduino Library","text":"<p>The SparkFun u-blox Cellular Arduino Library is a generic AT command-set library that works with multiple u-blox cellular modules that share the same AT Command Set. This includes the LARA-R6 on this board as well as the SARA-R5 and others. Most of the examples are generic and work with all modules but some require selecting a specific module to function properly.</p> <p>Download the library through the Arduino Library Manager tool by searching for \"SparkFun u-blox Cellular\" and download the latest version. Users who prefer to install it manually can download it from the GitHub repository or by clicking the button below:</p> <p> SparkFun u-blox Cellular Arduino Library (ZIP)) </p> <p>With the library installed, let's move on to taking a closer look at a few of the examples included in it.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#arduino-library-serial-selection","title":"Arduino Library Serial Selection","text":"<p>All examples in the SparkFun u-blox Cellular Arduino Library default to use <code>Serial1</code> for serial communication between the LTE Stick and microcontroller. If your selected microcontroller does not have this serial port, adjust this line to the correct serial port name:</p> <pre><code>#define mySerial Serial1\n</code></pre> <p>Otherwise, you can set up Software Serial by uncommenting the following line and, if necessary, adjusting the pins set for software serial (RX/TX) depending on the software serial library limitations.</p> <pre><code>// SoftwareSerial mySerial(16, 17);\n</code></pre>"},{"location":"troubleshooting/#test-point-cluster-precautions","title":"Test Point Cluster Precautions","text":"<p>Reminder, all the test point clusters on the back of the board (UART2, I<sup>2</sup>C, and GPIO) are not level shifted and run at 1.8V. Also note these are directly connected to the LARA-R6 and may be damaged by ESD shocks beyond the LARA-R6's ESD rating.</p>"},{"location":"troubleshooting/#general-troubleshooting","title":"General Troubleshooting","text":"<p>Info</p> <p><p> Not working as expected and need help? </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> SparkFun Technical Assistance Page <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.<p></p>"},{"location":"assets/component_documentation/","title":"component_documentation directory","text":"<p>Copies of the datasheets, user manuals, programming guides, etc. of the major electrical components on the board.</p>"},{"location":"assets/img/","title":"img directory","text":"<p>This folder should contain the images for the product documentation</p>"},{"location":"assets/img/#general-images","title":"General Images","text":"<ul> <li><code>sfe_logo_sm.png</code> - SparkFun flame logo (Cover page for with-pdf extension)</li> <li><code>sfe_logo_sq.png</code> - SparkFun flame logo (favicon)</li> </ul>"},{"location":"assets/img/#directory","title":"Directory","text":"<ul> <li><code>qr_code</code> - QR codes for the product documentation</li> </ul>"},{"location":"assets/img/#qr-codes","title":"QR Codes","text":"<ul> <li>QR code generator<ul> <li>Flame Color: #E0311D</li> <li>Frame Color: #3C464D</li> </ul> </li> <li>Remove meta data from svg</li> </ul>"},{"location":"github/","title":"github directory","text":"<p>This folder should contain the instructions for submitting issues and pull requests for this project</p>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun LTE Stick - LARA-R6 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun LTE Stick - LARA-R6 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun LTE Stick - LARA-R6 repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun LTE Stick - LARA-R6 repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"},{"location":"stylesheet/REAMDE/","title":"stylesheet directory","text":"<p>This folder should contain the files used for the webpage customizations of the product documentation</p>"}]}